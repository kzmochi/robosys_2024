新ロボットシステム学第２回
python3 を前につけて.pyを実行している
インタプリタ：テキストファイルを読み込んで直接実行

./a.outのように実行したい需要がある
./hello.py
可能にする2⃣つの条件
作業１：shebang「シバン」によるインタリタの指定
作業２：実行権限の付与

作業１：インタプリタの指定
#!/usr/bin/python3
which python3 とうつと
usr/bin/python3　と応答がかえってくる
Linuxがシバンを読んでインタプリタを起動

作業２：実行権限の付与
./hellow.py 「許可がない」と怒られるのでchmodで実行権限をつける
chmod +x hello.py
mv hello.py hellow 「拡張子」をつけなくても使えるようにもなる
./hellow
明示的に./でhome dirのhelloを実行しているが
usr/binに「パスを通す」ことでhelloを探して実行してくれる
PATH=$PATH:/home/suzuki
echo $PATH で「パスが通っているか確認する」
hellow で実行可能


新ロボットシステム学第３回
pytonのリスト表記 x = [a,b,c,d]
スライス
x[1:] 1以降
x[0::]0から1つ飛ばし(偶数)
x[1::]1から1つ飛ばし(奇数)

リスト内包
e = [ float(e) forリスト文 ]
sum(e)のように文字列を数値変換して積算

for文 やif文は括弧をつけなくて良い代わりに
インデントを揃える揃ってないとError
if 条件:
    処理
for 変数 in リスト
    処理

標準出力
コマンドの出力ファイルへの保存
「> ファイル」
出力のリダイレクトと呼ばれる

ファイルからの入力
ファイルから「< ファイル」でコマンドに渡す
sys.stdin 

|:パイプ
標準入力をstdinにパイプを使って入力する 
cat nums | stdin
処理A|処理B　処理間をパイプでつなぐ意味合い
★　特別な理由がない限りデータは標準入力から受付
引数や特定のファイルからだと、このような連携ができない

パイプの利点
横並びの数字や文字の混入に対応しなくて良い
・様々な入力に柔軟に対応しない（重要！しない）
・既存のコマンドで可能なことはプログラムしない

ROSの考え方
・入出力を厳格に
・プログラムごとに機能を分ける
・既存のプログアムを再利用しやすく

標準エラー出力
echo a | stdin > ans
ansは空のあたいになり標準出力されない。
echo a | stdin 2> error
errorには標準エラー出力結果が格納される


新ロボットシステム学第４回
・GitとGitHub
版管理(バージョン管理)システム
・ファイルの変更履歴を管理するためのシステム
・コードや文章を書くときは必須

GitHub
・Gitを利用したサービス
「リポジトリ」のホスティングと公開、コミュニケーション
鍵の設定
・手元のPCとGitHubとの通信を暗号化するために、公開鍵をGitHubに登録
・手元のPCには秘密鍵をもっておく
$ ssh-keygen
$ ls ~/.ssh/
id_rsa, id_rsa.pub この２つのファイルがあればOK
・GitHubのHome画面からユーザーアイコン --> Setting-->SSH and GPG keys-->New SSH key
id_rsa.pubの中身をコピーして貼り付け
ファイアウォール回避の設定

リポジトリの作成
GitHub の+マークからリポジトリを作成する
ライセンスについては後述する

リポジトリを手元にコピー
リポジトリ画面の"Code"をクリックして、"SSH"を選択してURLをコピー
端末上で、git clone <コピーしたURL>

リポジトリにコードをコミット
git add stdin
git status --> add状態がわかる
git commit -m "log comment"
git log -n 1 --> 最新ログコメント

GitHubへの反映
コミットしたコマンドをGitへアップロードする
プッシュと呼ぶ --> git push

GitHubを利用した開発
・GitHubにコードをアップする利点
 >自分のコーdを紛失する可能性が極めて低い
 >自分の力を見せることが可能
 >ラズパイのソースとPCのソースのバージョン違いがなくなる
・面倒なこと
 >ライセンス等の整備
 >使えないものを置かない
・改良しようと手を加えたらコードが動かなくなる
 >GitHubに直接pushするとバグがあるとコードが使えない危険がある
 >GitHubにpushしないで放置すると作業の記録が残せない
★　ブランチを分ける

ブランチ
デフォルトはmainのみ
git branch
mainブランチに動くものをおいて、開発用のブランチを作る

devブランチでの開発
git switch -c dev
*dev --> mainブランチがコピーされ以降*がついた環境にコミットされる
main
すべてのファイルをaddするオプション
git add -A
めちゃ有能なのは、中間生成物のごみのままadd -Aしてしまっても
保存後もういちどadd -Aすると中間生成物は除外してリスト化してくれる
そのままpushしようとするとpush先がわからないと怒られる
git push --set-upstream origin dev
として明確にpush先をしていしてあげる.2回目からは指定なしでdevにpushする。
devのコミット情報をmain へ「マージ」する
git switch main --> まずはmainへ戻る


コミットグラフ
git log --graph
各コミットに「コミットハッシュ値」がついている
{ }の中にブランチ名











